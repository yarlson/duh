// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package server

import (
	"context"
	"github.com/yarlson/duh/docker"
	"sync"
)

// Ensure, that DockerClientMock does implement DockerClient.
// If this is not the case, regenerate this file with moq.
var _ DockerClient = &DockerClientMock{}

// DockerClientMock is a mock implementation of DockerClient.
//
//	func TestSomethingThatUsesDockerClient(t *testing.T) {
//
//		// make and configure a mocked DockerClient
//		mockedDockerClient := &DockerClientMock{
//			GetContainerStatsFunc: func(ctx context.Context, id string) (*docker.ContainerStats, error) {
//				panic("mock out the GetContainerStats method")
//			},
//			ListContainersFunc: func(ctx context.Context, all bool) ([]docker.Container, error) {
//				panic("mock out the ListContainers method")
//			},
//			StartContainerFunc: func(ctx context.Context, id string) error {
//				panic("mock out the StartContainer method")
//			},
//			StopContainerFunc: func(ctx context.Context, id string) error {
//				panic("mock out the StopContainer method")
//			},
//		}
//
//		// use mockedDockerClient in code that requires DockerClient
//		// and then make assertions.
//
//	}
type DockerClientMock struct {
	// GetContainerStatsFunc mocks the GetContainerStats method.
	GetContainerStatsFunc func(ctx context.Context, id string) (*docker.ContainerStats, error)

	// ListContainersFunc mocks the ListContainers method.
	ListContainersFunc func(ctx context.Context, all bool) ([]docker.Container, error)

	// StartContainerFunc mocks the StartContainer method.
	StartContainerFunc func(ctx context.Context, id string) error

	// StopContainerFunc mocks the StopContainer method.
	StopContainerFunc func(ctx context.Context, id string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetContainerStats holds details about calls to the GetContainerStats method.
		GetContainerStats []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ListContainers holds details about calls to the ListContainers method.
		ListContainers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// All is the all argument value.
			All bool
		}
		// StartContainer holds details about calls to the StartContainer method.
		StartContainer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// StopContainer holds details about calls to the StopContainer method.
		StopContainer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
	}
	lockGetContainerStats sync.RWMutex
	lockListContainers    sync.RWMutex
	lockStartContainer    sync.RWMutex
	lockStopContainer     sync.RWMutex
}

// GetContainerStats calls GetContainerStatsFunc.
func (mock *DockerClientMock) GetContainerStats(ctx context.Context, id string) (*docker.ContainerStats, error) {
	if mock.GetContainerStatsFunc == nil {
		panic("DockerClientMock.GetContainerStatsFunc: method is nil but DockerClient.GetContainerStats was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetContainerStats.Lock()
	mock.calls.GetContainerStats = append(mock.calls.GetContainerStats, callInfo)
	mock.lockGetContainerStats.Unlock()
	return mock.GetContainerStatsFunc(ctx, id)
}

// GetContainerStatsCalls gets all the calls that were made to GetContainerStats.
// Check the length with:
//
//	len(mockedDockerClient.GetContainerStatsCalls())
func (mock *DockerClientMock) GetContainerStatsCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetContainerStats.RLock()
	calls = mock.calls.GetContainerStats
	mock.lockGetContainerStats.RUnlock()
	return calls
}

// ListContainers calls ListContainersFunc.
func (mock *DockerClientMock) ListContainers(ctx context.Context, all bool) ([]docker.Container, error) {
	if mock.ListContainersFunc == nil {
		panic("DockerClientMock.ListContainersFunc: method is nil but DockerClient.ListContainers was just called")
	}
	callInfo := struct {
		Ctx context.Context
		All bool
	}{
		Ctx: ctx,
		All: all,
	}
	mock.lockListContainers.Lock()
	mock.calls.ListContainers = append(mock.calls.ListContainers, callInfo)
	mock.lockListContainers.Unlock()
	return mock.ListContainersFunc(ctx, all)
}

// ListContainersCalls gets all the calls that were made to ListContainers.
// Check the length with:
//
//	len(mockedDockerClient.ListContainersCalls())
func (mock *DockerClientMock) ListContainersCalls() []struct {
	Ctx context.Context
	All bool
} {
	var calls []struct {
		Ctx context.Context
		All bool
	}
	mock.lockListContainers.RLock()
	calls = mock.calls.ListContainers
	mock.lockListContainers.RUnlock()
	return calls
}

// StartContainer calls StartContainerFunc.
func (mock *DockerClientMock) StartContainer(ctx context.Context, id string) error {
	if mock.StartContainerFunc == nil {
		panic("DockerClientMock.StartContainerFunc: method is nil but DockerClient.StartContainer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockStartContainer.Lock()
	mock.calls.StartContainer = append(mock.calls.StartContainer, callInfo)
	mock.lockStartContainer.Unlock()
	return mock.StartContainerFunc(ctx, id)
}

// StartContainerCalls gets all the calls that were made to StartContainer.
// Check the length with:
//
//	len(mockedDockerClient.StartContainerCalls())
func (mock *DockerClientMock) StartContainerCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockStartContainer.RLock()
	calls = mock.calls.StartContainer
	mock.lockStartContainer.RUnlock()
	return calls
}

// StopContainer calls StopContainerFunc.
func (mock *DockerClientMock) StopContainer(ctx context.Context, id string) error {
	if mock.StopContainerFunc == nil {
		panic("DockerClientMock.StopContainerFunc: method is nil but DockerClient.StopContainer was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockStopContainer.Lock()
	mock.calls.StopContainer = append(mock.calls.StopContainer, callInfo)
	mock.lockStopContainer.Unlock()
	return mock.StopContainerFunc(ctx, id)
}

// StopContainerCalls gets all the calls that were made to StopContainer.
// Check the length with:
//
//	len(mockedDockerClient.StopContainerCalls())
func (mock *DockerClientMock) StopContainerCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockStopContainer.RLock()
	calls = mock.calls.StopContainer
	mock.lockStopContainer.RUnlock()
	return calls
}
